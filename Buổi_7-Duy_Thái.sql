--Câu 1:
select 
    p.product_id,
    p.product_name,
    ROUND(AVG(OI.UNIT_PRICE),2) AS AVG_PRICE
from ORDER_ITEMS OI
JOIN PRODUCTS P
ON P.PRODUCT_ID = OI.PRODUCT_ID
GROUP BY 
    p.product_id,
    p.product_name

--CÂU 2:
SELECT 
    P.PRODUCT_ID, 
    P.PRODUCT_NAME
FROM 
    PRODUCTS P
LEFT JOIN 
    ORDER_ITEMS OI 
ON 
    P.PRODUCT_ID = OI.PRODUCT_ID
WHERE 
    OI.QUANTITY IS NULL;
    
--CÂU 3:
SELECT
    P.PRODUCT_ID,
    P.PRODUCT_NAME,
    I.QUANTITY
FROM PRODUCTS P
LEFT JOIN INVENTORIES I
ON P.PRODUCT_ID = I.PRODUCT_ID
WHERE
    I.QUANTITY IS NULL

--CÂU 4
SELECT
    C.CUSTOMER_ID,
    C.NAME,
    EXTRACT(YEAR FROM O.ORDER_DATE) AS ORDER_YEAR
FROM CUSTOMERS C
JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE EXTRACT(YEAR FROM O.ORDER_DATE) = 2016


--CÂU 5
SELECT
    C.CUSTOMER_ID,
    C.NAME,
    EXTRACT(YEAR FROM O.ORDER_DATE) AS ORDER_YEAR
FROM CUSTOMERS C
JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE EXTRACT(YEAR FROM O.ORDER_DATE) != 2017

--Câu 6
SELECT
    CUSTOMER_ID,
    NAME
FROM 
    CUSTOMERS
WHERE CREDIT_LIMIT > (SELECT AVG(CREDIT_LIMIT) FROM CUSTOMERS)


--CÂU 7
SELECT
    C.CUSTOMER_ID,
    C.NAME,
    SUM(OI.QUANTITY) AS TOTAL_QUANTITY
FROM CUSTOMERS C
JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
WHERE
    O.ORDER_DATE > TO_DATE('2017-02-10','YYYY-MM-DD')
GROUP BY 
    C.CUSTOMER_ID,
    C.NAME
HAVING
    SUM(OI.QUANTITY)>50
ORDER BY 
    TOTAL_QUANTITY DESC
FETCH FIRST ROW ONLY;

--CÂU 8
WITH REVENUE_PRODUCT AS(
SELECT
    P.PRODUCT_ID,
    P.PRODUCT_NAME,
    SUM(OI.QUANTITY * OI.UNIT_PRICE) AS DOANH_THU
FROM 
    ORDER_ITEMS OI
JOIN 
    PRODUCTS P
ON 
    P.PRODUCT_ID = OI.PRODUCT_ID
GROUP BY
    P.PRODUCT_ID,
    P.PRODUCT_NAME
)
, REVENUE AS(
SELECT
    SUM(DOANH_THU) AS TONG_DOANH_THU
FROM 
    REVENUE_PRODUCT
)
SELECT
    RP.PRODUCT_ID,
    RP.PRODUCT_NAME,
    RP.DOANH_THU,
    ROUND((RP.DOANH_THU/R.TONG_DOANH_THU)*100,2) AS PERCENT_REVENUE
FROM
    REVENUE_PRODUCT RP,
    REVENUE R
ORDER BY 
    RP.DOANH_THU


--CÂU 9
CREATE VIEW Cst_Order AS
SELECT 
    C.CUSTOMER_ID, 
    C.NAME,
    O.ORDER_ID,
    O.ORDER_DATE,
    SUM(OI.QUANTITY) AS TOTAL_QUANTITY
FROM 
    CUSTOMERS C
INNER JOIN 
    ORDERS O 
ON 
    C.CUSTOMER_ID = O.CUSTOMER_ID
INNER JOIN 
    ORDER_ITEMS OI 
ON 
    O.ORDER_ID = OI.ORDER_ID
WHERE 
    O.STATUS = 'Pending'
    AND O.ORDER_DATE > TO_DATE('2017-02-10', 'YYYY-MM-DD')
GROUP BY 
    C.CUSTOMER_ID, 
    C.NAME, 
    O.ORDER_ID, 
    O.ORDER_DATE
HAVING 
    SUM(OI.QUANTITY) > 50
ORDER BY 
    C.CUSTOMER_ID;


--CÂU 11
CREATE VIEW Cst_Order AS(
SELECT
    p.product_id,
    P.PRODUCT_NAME,
    W.WAREHOUSE_NAME,
    COU.COUNTRY_NAME,
    SUM(I.QUANTITY) AS TOTAL_QUANTITY
FROM PRODUCTS P
JOIN INVENTORIES I
ON P.PRODUCT_ID = I.PRODUCT_ID
JOIN WAREHOUSES W
ON I.WAREHOUSE_ID = W.WAREHOUSE_ID
JOIN LOCATION L
ON L.LOCATION_ID = W.lOCATION_ID
JOIN COUNTRIES COU
ON COU.COUNTRY_ID = L.COUNTRY_ID
GROUP BY
    p.product_id,
    P.PRODUCT_NAME,
    W.WAREHOUSE_NAME,
    COU.COUNTRY_NAME
ORDER BY TOTAL_QUANTITY 
FETCH FIRST 100 ROWS ONLY;
)










